/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRoleCommand,
  GetApiRoleParams,
  ProblemDetails,
  RoleDto,
  UpdateRoleCommand,
  UserRoleDto
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiRole = (
    params?: GetApiRoleParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<RoleDto[]>(
      {url: `/api/Role`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiRoleQueryKey = (params?: GetApiRoleParams,) => {
    return [`/api/Role`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoleInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiRole>>, GetApiRoleParams['page']>, TError = ProblemDetails>(params?: GetApiRoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData, Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']> = ({ signal, pageParam }) => getApiRole({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData, Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRole>>>
export type GetApiRoleInfiniteQueryError = ProblemDetails


export function useGetApiRoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRole>>, GetApiRoleParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiRoleParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData, Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRole>>,
          TError,
          Awaited<ReturnType<typeof getApiRole>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRole>>, GetApiRoleParams['page']>, TError = ProblemDetails>(
 params?: GetApiRoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData, Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRole>>,
          TError,
          Awaited<ReturnType<typeof getApiRole>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRole>>, GetApiRoleParams['page']>, TError = ProblemDetails>(
 params?: GetApiRoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData, Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRole>>, GetApiRoleParams['page']>, TError = ProblemDetails>(
 params?: GetApiRoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData, Awaited<ReturnType<typeof getApiRole>>, QueryKey, GetApiRoleParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiRoleQueryOptions = <TData = Awaited<ReturnType<typeof getApiRole>>, TError = ProblemDetails>(params?: GetApiRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRole>>> = ({ signal }) => getApiRole(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRole>>>
export type GetApiRoleQueryError = ProblemDetails


export function useGetApiRole<TData = Awaited<ReturnType<typeof getApiRole>>, TError = ProblemDetails>(
 params: undefined |  GetApiRoleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRole>>,
          TError,
          Awaited<ReturnType<typeof getApiRole>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRole<TData = Awaited<ReturnType<typeof getApiRole>>, TError = ProblemDetails>(
 params?: GetApiRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRole>>,
          TError,
          Awaited<ReturnType<typeof getApiRole>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRole<TData = Awaited<ReturnType<typeof getApiRole>>, TError = ProblemDetails>(
 params?: GetApiRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRole<TData = Awaited<ReturnType<typeof getApiRole>>, TError = ProblemDetails>(
 params?: GetApiRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRole>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiRole = (
    createRoleCommand: CreateRoleCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/Role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRoleCommand, signal
    },
      );
    }
  


export const getPostApiRoleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRole>>, TError,{data: CreateRoleCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRole>>, TError,{data: CreateRoleCommand}, TContext> => {

const mutationKey = ['postApiRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRole>>, {data: CreateRoleCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiRole(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRole>>>
    export type PostApiRoleMutationBody = CreateRoleCommand
    export type PostApiRoleMutationError = ProblemDetails

    export const usePostApiRole = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRole>>, TError,{data: CreateRoleCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRole>>,
        TError,
        {data: CreateRoleCommand},
        TContext
      > => {

      const mutationOptions = getPostApiRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiRoleId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<RoleDto>(
      {url: `/api/Role/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiRoleIdQueryKey = (id: string,) => {
    return [`/api/Role/${id}`] as const;
    }

    
export const getGetApiRoleIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoleId>>> = ({ signal }) => getApiRoleId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoleId>>>
export type GetApiRoleIdInfiniteQueryError = ProblemDetails


export function useGetApiRoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiRoleIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoleId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoleId>>> = ({ signal }) => getApiRoleId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoleId>>>
export type GetApiRoleIdQueryError = ProblemDetails


export function useGetApiRoleId<TData = Awaited<ReturnType<typeof getApiRoleId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleId<TData = Awaited<ReturnType<typeof getApiRoleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleId<TData = Awaited<ReturnType<typeof getApiRoleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleId<TData = Awaited<ReturnType<typeof getApiRoleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiRoleId = (
    id: string,
    updateRoleCommand: UpdateRoleCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Role/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRoleCommand
    },
      );
    }
  


export const getPutApiRoleIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoleId>>, TError,{id: string;data: UpdateRoleCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiRoleId>>, TError,{id: string;data: UpdateRoleCommand}, TContext> => {

const mutationKey = ['putApiRoleId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRoleId>>, {id: string;data: UpdateRoleCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiRoleId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiRoleIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRoleId>>>
    export type PutApiRoleIdMutationBody = UpdateRoleCommand
    export type PutApiRoleIdMutationError = ProblemDetails

    export const usePutApiRoleId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiRoleId>>, TError,{id: string;data: UpdateRoleCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiRoleId>>,
        TError,
        {id: string;data: UpdateRoleCommand},
        TContext
      > => {

      const mutationOptions = getPutApiRoleIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiRoleId = (
    id: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Role/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiRoleIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoleId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoleId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiRoleId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRoleId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiRoleId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRoleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRoleId>>>
    
    export type DeleteApiRoleIdMutationError = ProblemDetails

    export const useDeleteApiRoleId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRoleId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRoleId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiRoleIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiRoleUserUserId = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<UserRoleDto>(
      {url: `/api/Role/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiRoleUserUserIdQueryKey = (userId: string,) => {
    return [`/api/Role/user/${userId}`] as const;
    }

    
export const getGetApiRoleUserUserIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleUserUserId>>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoleUserUserId>>> = ({ signal }) => getApiRoleUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleUserUserIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoleUserUserId>>>
export type GetApiRoleUserUserIdInfiniteQueryError = ProblemDetails


export function useGetApiRoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleUserUserIdInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiRoleUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoleUserUserId>>> = ({ signal }) => getApiRoleUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoleUserUserId>>>
export type GetApiRoleUserUserIdQueryError = ProblemDetails


export function useGetApiRoleUserUserId<TData = Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleUserUserId<TData = Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleUserUserId<TData = Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleUserUserId<TData = Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiRoleUserUserIdAddRole = (
    userId: string,
    postApiRoleUserUserIdAddRoleBody: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Role/user/${userId}/add-role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiRoleUserUserIdAddRoleBody, signal
    },
      );
    }
  


export const getPostApiRoleUserUserIdAddRoleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoleUserUserIdAddRole>>, TError,{userId: string;data: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoleUserUserIdAddRole>>, TError,{userId: string;data: string}, TContext> => {

const mutationKey = ['postApiRoleUserUserIdAddRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoleUserUserIdAddRole>>, {userId: string;data: string}> = (props) => {
          const {userId,data} = props ?? {};

          return  postApiRoleUserUserIdAddRole(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoleUserUserIdAddRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoleUserUserIdAddRole>>>
    export type PostApiRoleUserUserIdAddRoleMutationBody = string
    export type PostApiRoleUserUserIdAddRoleMutationError = ProblemDetails

    export const usePostApiRoleUserUserIdAddRole = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoleUserUserIdAddRole>>, TError,{userId: string;data: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoleUserUserIdAddRole>>,
        TError,
        {userId: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostApiRoleUserUserIdAddRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiRoleUserUserIdRemoveRole = (
    userId: string,
    postApiRoleUserUserIdRemoveRoleBody: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Role/user/${userId}/remove-role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiRoleUserUserIdRemoveRoleBody, signal
    },
      );
    }
  


export const getPostApiRoleUserUserIdRemoveRoleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoleUserUserIdRemoveRole>>, TError,{userId: string;data: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoleUserUserIdRemoveRole>>, TError,{userId: string;data: string}, TContext> => {

const mutationKey = ['postApiRoleUserUserIdRemoveRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoleUserUserIdRemoveRole>>, {userId: string;data: string}> = (props) => {
          const {userId,data} = props ?? {};

          return  postApiRoleUserUserIdRemoveRole(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoleUserUserIdRemoveRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoleUserUserIdRemoveRole>>>
    export type PostApiRoleUserUserIdRemoveRoleMutationBody = string
    export type PostApiRoleUserUserIdRemoveRoleMutationError = ProblemDetails

    export const usePostApiRoleUserUserIdRemoveRole = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoleUserUserIdRemoveRole>>, TError,{userId: string;data: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoleUserUserIdRemoveRole>>,
        TError,
        {userId: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostApiRoleUserUserIdRemoveRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    