/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRoleCommand,
  GetApiV1RoleParams,
  ProblemDetails,
  RoleDto,
  UpdateRoleCommand,
  UserRoleDto
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1Role = (
    params?: GetApiV1RoleParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<RoleDto[]>(
      {url: `/api/v1/Role`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1RoleQueryKey = (params?: GetApiV1RoleParams,) => {
    return [`/api/v1/Role`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1RoleInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Role>>, GetApiV1RoleParams['page']>, TError = ProblemDetails>(params?: GetApiV1RoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData, Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']> = ({ signal, pageParam }) => getApiV1Role({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData, Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RoleInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Role>>>
export type GetApiV1RoleInfiniteQueryError = ProblemDetails


export function useGetApiV1RoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Role>>, GetApiV1RoleParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiV1RoleParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData, Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Role>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Role>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Role>>, GetApiV1RoleParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1RoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData, Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Role>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Role>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Role>>, GetApiV1RoleParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1RoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData, Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1RoleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Role>>, GetApiV1RoleParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1RoleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData, Awaited<ReturnType<typeof getApiV1Role>>, QueryKey, GetApiV1RoleParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RoleInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1RoleQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Role>>, TError = ProblemDetails>(params?: GetApiV1RoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Role>>> = ({ signal }) => getApiV1Role(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RoleQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Role>>>
export type GetApiV1RoleQueryError = ProblemDetails


export function useGetApiV1Role<TData = Awaited<ReturnType<typeof getApiV1Role>>, TError = ProblemDetails>(
 params: undefined |  GetApiV1RoleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Role>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Role>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Role<TData = Awaited<ReturnType<typeof getApiV1Role>>, TError = ProblemDetails>(
 params?: GetApiV1RoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Role>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Role>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Role<TData = Awaited<ReturnType<typeof getApiV1Role>>, TError = ProblemDetails>(
 params?: GetApiV1RoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Role<TData = Awaited<ReturnType<typeof getApiV1Role>>, TError = ProblemDetails>(
 params?: GetApiV1RoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Role>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RoleQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1Role = (
    createRoleCommand: CreateRoleCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/v1/Role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRoleCommand, signal
    },
      );
    }
  


export const getPostApiV1RoleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Role>>, TError,{data: CreateRoleCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Role>>, TError,{data: CreateRoleCommand}, TContext> => {

const mutationKey = ['postApiV1Role'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Role>>, {data: CreateRoleCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Role(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Role>>>
    export type PostApiV1RoleMutationBody = CreateRoleCommand
    export type PostApiV1RoleMutationError = ProblemDetails

    export const usePostApiV1Role = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Role>>, TError,{data: CreateRoleCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Role>>,
        TError,
        {data: CreateRoleCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1RoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1RoleId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<RoleDto>(
      {url: `/api/v1/Role/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1RoleIdQueryKey = (id: string,) => {
    return [`/api/v1/Role/${id}`] as const;
    }

    
export const getGetApiV1RoleIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1RoleId>>> = ({ signal }) => getApiV1RoleId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RoleIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RoleId>>>
export type GetApiV1RoleIdInfiniteQueryError = ProblemDetails


export function useGetApiV1RoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1RoleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RoleIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1RoleIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1RoleId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1RoleId>>> = ({ signal }) => getApiV1RoleId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RoleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RoleId>>>
export type GetApiV1RoleIdQueryError = ProblemDetails


export function useGetApiV1RoleId<TData = Awaited<ReturnType<typeof getApiV1RoleId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleId<TData = Awaited<ReturnType<typeof getApiV1RoleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleId<TData = Awaited<ReturnType<typeof getApiV1RoleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1RoleId<TData = Awaited<ReturnType<typeof getApiV1RoleId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RoleIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiV1RoleId = (
    id: string,
    updateRoleCommand: UpdateRoleCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Role/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRoleCommand
    },
      );
    }
  


export const getPutApiV1RoleIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1RoleId>>, TError,{id: string;data: UpdateRoleCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1RoleId>>, TError,{id: string;data: UpdateRoleCommand}, TContext> => {

const mutationKey = ['putApiV1RoleId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1RoleId>>, {id: string;data: UpdateRoleCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1RoleId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1RoleIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1RoleId>>>
    export type PutApiV1RoleIdMutationBody = UpdateRoleCommand
    export type PutApiV1RoleIdMutationError = ProblemDetails

    export const usePutApiV1RoleId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1RoleId>>, TError,{id: string;data: UpdateRoleCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1RoleId>>,
        TError,
        {id: string;data: UpdateRoleCommand},
        TContext
      > => {

      const mutationOptions = getPutApiV1RoleIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiV1RoleId = (
    id: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Role/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1RoleIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1RoleId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1RoleId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1RoleId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1RoleId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1RoleId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1RoleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1RoleId>>>
    
    export type DeleteApiV1RoleIdMutationError = ProblemDetails

    export const useDeleteApiV1RoleId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1RoleId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1RoleId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1RoleIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1RoleUserUserId = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<UserRoleDto>(
      {url: `/api/v1/Role/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1RoleUserUserIdQueryKey = (userId: string,) => {
    return [`/api/v1/Role/user/${userId}`] as const;
    }

    
export const getGetApiV1RoleUserUserIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>> = ({ signal }) => getApiV1RoleUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RoleUserUserIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>
export type GetApiV1RoleUserUserIdInfiniteQueryError = ProblemDetails


export function useGetApiV1RoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1RoleUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RoleUserUserIdInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1RoleUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1RoleUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>> = ({ signal }) => getApiV1RoleUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1RoleUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>>
export type GetApiV1RoleUserUserIdQueryError = ProblemDetails


export function useGetApiV1RoleUserUserId<TData = Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleUserUserId<TData = Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1RoleUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1RoleUserUserId<TData = Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1RoleUserUserId<TData = Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1RoleUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1RoleUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1RoleUserUserIdAddRole = (
    userId: string,
    postApiV1RoleUserUserIdAddRoleBody: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Role/user/${userId}/add-role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiV1RoleUserUserIdAddRoleBody, signal
    },
      );
    }
  


export const getPostApiV1RoleUserUserIdAddRoleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleUserUserIdAddRole>>, TError,{userId: string;data: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleUserUserIdAddRole>>, TError,{userId: string;data: string}, TContext> => {

const mutationKey = ['postApiV1RoleUserUserIdAddRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1RoleUserUserIdAddRole>>, {userId: string;data: string}> = (props) => {
          const {userId,data} = props ?? {};

          return  postApiV1RoleUserUserIdAddRole(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleUserUserIdAddRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1RoleUserUserIdAddRole>>>
    export type PostApiV1RoleUserUserIdAddRoleMutationBody = string
    export type PostApiV1RoleUserUserIdAddRoleMutationError = ProblemDetails

    export const usePostApiV1RoleUserUserIdAddRole = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleUserUserIdAddRole>>, TError,{userId: string;data: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1RoleUserUserIdAddRole>>,
        TError,
        {userId: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostApiV1RoleUserUserIdAddRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1RoleUserUserIdRemoveRole = (
    userId: string,
    postApiV1RoleUserUserIdRemoveRoleBody: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Role/user/${userId}/remove-role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiV1RoleUserUserIdRemoveRoleBody, signal
    },
      );
    }
  


export const getPostApiV1RoleUserUserIdRemoveRoleMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleUserUserIdRemoveRole>>, TError,{userId: string;data: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleUserUserIdRemoveRole>>, TError,{userId: string;data: string}, TContext> => {

const mutationKey = ['postApiV1RoleUserUserIdRemoveRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1RoleUserUserIdRemoveRole>>, {userId: string;data: string}> = (props) => {
          const {userId,data} = props ?? {};

          return  postApiV1RoleUserUserIdRemoveRole(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleUserUserIdRemoveRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1RoleUserUserIdRemoveRole>>>
    export type PostApiV1RoleUserUserIdRemoveRoleMutationBody = string
    export type PostApiV1RoleUserUserIdRemoveRoleMutationError = ProblemDetails

    export const usePostApiV1RoleUserUserIdRemoveRole = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleUserUserIdRemoveRole>>, TError,{userId: string;data: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1RoleUserUserIdRemoveRole>>,
        TError,
        {userId: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostApiV1RoleUserUserIdRemoveRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1RoleDeleteMany = (
    postApiV1RoleDeleteManyBody: string[],
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Role/delete-many`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiV1RoleDeleteManyBody, signal
    },
      );
    }
  


export const getPostApiV1RoleDeleteManyMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleDeleteMany>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleDeleteMany>>, TError,{data: string[]}, TContext> => {

const mutationKey = ['postApiV1RoleDeleteMany'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1RoleDeleteMany>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1RoleDeleteMany(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1RoleDeleteManyMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1RoleDeleteMany>>>
    export type PostApiV1RoleDeleteManyMutationBody = string[]
    export type PostApiV1RoleDeleteManyMutationError = ProblemDetails

    export const usePostApiV1RoleDeleteMany = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1RoleDeleteMany>>, TError,{data: string[]}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1RoleDeleteMany>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPostApiV1RoleDeleteManyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    