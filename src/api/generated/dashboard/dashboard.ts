/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiV1DashboardRecentActivityParams
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1DashboardStats = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Dashboard/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1DashboardStatsQueryKey = () => {
    return [`/api/v1/Dashboard/stats`] as const;
    }

    
export const getGetApiV1DashboardStatsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardStats>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DashboardStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DashboardStats>>> = ({ signal }) => getApiV1DashboardStats(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DashboardStatsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DashboardStats>>>
export type GetApiV1DashboardStatsInfiniteQueryError = unknown


export function useGetApiV1DashboardStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardStats>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardStats>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardStats>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1DashboardStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardStats>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DashboardStatsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1DashboardStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DashboardStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DashboardStats>>> = ({ signal }) => getApiV1DashboardStats(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DashboardStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DashboardStats>>>
export type GetApiV1DashboardStatsQueryError = unknown


export function useGetApiV1DashboardStats<TData = Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardStats<TData = Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardStats<TData = Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1DashboardStats<TData = Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DashboardStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1DashboardRecentActivity = (
    params?: GetApiV1DashboardRecentActivityParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Dashboard/recent-activity`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1DashboardRecentActivityQueryKey = (params?: GetApiV1DashboardRecentActivityParams,) => {
    return [`/api/v1/Dashboard/recent-activity`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1DashboardRecentActivityInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, GetApiV1DashboardRecentActivityParams['page']>, TError = unknown>(params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData, Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DashboardRecentActivityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']> = ({ signal, pageParam }) => getApiV1DashboardRecentActivity({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData, Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DashboardRecentActivityInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>>
export type GetApiV1DashboardRecentActivityInfiniteQueryError = unknown


export function useGetApiV1DashboardRecentActivityInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, GetApiV1DashboardRecentActivityParams['page']>, TError = unknown>(
 params: undefined |  GetApiV1DashboardRecentActivityParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData, Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardRecentActivityInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, GetApiV1DashboardRecentActivityParams['page']>, TError = unknown>(
 params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData, Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardRecentActivityInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, GetApiV1DashboardRecentActivityParams['page']>, TError = unknown>(
 params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData, Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1DashboardRecentActivityInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, GetApiV1DashboardRecentActivityParams['page']>, TError = unknown>(
 params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData, Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, QueryKey, GetApiV1DashboardRecentActivityParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DashboardRecentActivityInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1DashboardRecentActivityQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError = unknown>(params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DashboardRecentActivityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>> = ({ signal }) => getApiV1DashboardRecentActivity(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1DashboardRecentActivityQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>>
export type GetApiV1DashboardRecentActivityQueryError = unknown


export function useGetApiV1DashboardRecentActivity<TData = Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError = unknown>(
 params: undefined |  GetApiV1DashboardRecentActivityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardRecentActivity<TData = Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError = unknown>(
 params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>,
          TError,
          Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1DashboardRecentActivity<TData = Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError = unknown>(
 params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1DashboardRecentActivity<TData = Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError = unknown>(
 params?: GetApiV1DashboardRecentActivityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1DashboardRecentActivity>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1DashboardRecentActivityQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



