/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiRoleTestClientRolesParams,
  PostApiRoleTestSyncClientRolesParams
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiRoleTestClientRoles = (
    params?: GetApiRoleTestClientRolesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/RoleTest/client-roles`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiRoleTestClientRolesQueryKey = (params?: GetApiRoleTestClientRolesParams,) => {
    return [`/api/RoleTest/client-roles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiRoleTestClientRolesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, GetApiRoleTestClientRolesParams['page']>, TError = unknown>(params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData, Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleTestClientRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']> = ({ signal, pageParam }) => getApiRoleTestClientRoles({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData, Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleTestClientRolesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>>
export type GetApiRoleTestClientRolesInfiniteQueryError = unknown


export function useGetApiRoleTestClientRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, GetApiRoleTestClientRolesParams['page']>, TError = unknown>(
 params: undefined |  GetApiRoleTestClientRolesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData, Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleTestClientRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, GetApiRoleTestClientRolesParams['page']>, TError = unknown>(
 params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData, Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleTestClientRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, GetApiRoleTestClientRolesParams['page']>, TError = unknown>(
 params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData, Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleTestClientRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, GetApiRoleTestClientRolesParams['page']>, TError = unknown>(
 params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData, Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, QueryKey, GetApiRoleTestClientRolesParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleTestClientRolesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiRoleTestClientRolesQueryOptions = <TData = Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError = unknown>(params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRoleTestClientRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>> = ({ signal }) => getApiRoleTestClientRoles(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRoleTestClientRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>>
export type GetApiRoleTestClientRolesQueryError = unknown


export function useGetApiRoleTestClientRoles<TData = Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError = unknown>(
 params: undefined |  GetApiRoleTestClientRolesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleTestClientRoles<TData = Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError = unknown>(
 params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoleTestClientRoles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiRoleTestClientRoles<TData = Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError = unknown>(
 params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiRoleTestClientRoles<TData = Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError = unknown>(
 params?: GetApiRoleTestClientRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRoleTestClientRoles>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRoleTestClientRolesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiRoleTestSyncClientRoles = (
    params?: PostApiRoleTestSyncClientRolesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/RoleTest/sync-client-roles`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostApiRoleTestSyncClientRolesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoleTestSyncClientRoles>>, TError,{params?: PostApiRoleTestSyncClientRolesParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRoleTestSyncClientRoles>>, TError,{params?: PostApiRoleTestSyncClientRolesParams}, TContext> => {

const mutationKey = ['postApiRoleTestSyncClientRoles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRoleTestSyncClientRoles>>, {params?: PostApiRoleTestSyncClientRolesParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiRoleTestSyncClientRoles(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRoleTestSyncClientRolesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRoleTestSyncClientRoles>>>
    
    export type PostApiRoleTestSyncClientRolesMutationError = unknown

    export const usePostApiRoleTestSyncClientRoles = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRoleTestSyncClientRoles>>, TError,{params?: PostApiRoleTestSyncClientRolesParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRoleTestSyncClientRoles>>,
        TError,
        {params?: PostApiRoleTestSyncClientRolesParams},
        TContext
      > => {

      const mutationOptions = getPostApiRoleTestSyncClientRolesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    