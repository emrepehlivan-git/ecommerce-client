/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddToCartCommand,
  CartDto,
  CartSummaryDto,
  ProblemDetails,
  UpdateCartItemQuantityCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1Cart = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CartDto>(
      {url: `/api/v1/Cart`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1CartQueryKey = () => {
    return [`/api/v1/Cart`] as const;
    }

    
export const getGetApiV1CartInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Cart>>>, TError = ProblemDetails>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Cart>>> = ({ signal }) => getApiV1Cart(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CartInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Cart>>>
export type GetApiV1CartInfiniteQueryError = ProblemDetails


export function useGetApiV1CartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Cart>>>, TError = ProblemDetails>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Cart>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Cart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Cart>>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Cart>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Cart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Cart>>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Cart>>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CartInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1CartQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Cart>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Cart>>> = ({ signal }) => getApiV1Cart(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CartQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Cart>>>
export type GetApiV1CartQueryError = ProblemDetails


export function useGetApiV1Cart<TData = Awaited<ReturnType<typeof getApiV1Cart>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Cart>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Cart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Cart<TData = Awaited<ReturnType<typeof getApiV1Cart>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Cart>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Cart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Cart<TData = Awaited<ReturnType<typeof getApiV1Cart>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Cart<TData = Awaited<ReturnType<typeof getApiV1Cart>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Cart>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CartQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1CartAdd = (
    addToCartCommand: AddToCartCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CartSummaryDto>(
      {url: `/api/v1/Cart/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addToCartCommand, signal
    },
      );
    }
  


export const getPostApiV1CartAddMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1CartAdd>>, TError,{data: AddToCartCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1CartAdd>>, TError,{data: AddToCartCommand}, TContext> => {

const mutationKey = ['postApiV1CartAdd'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1CartAdd>>, {data: AddToCartCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1CartAdd(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CartAddMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1CartAdd>>>
    export type PostApiV1CartAddMutationBody = AddToCartCommand
    export type PostApiV1CartAddMutationError = ProblemDetails

    export const usePostApiV1CartAdd = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1CartAdd>>, TError,{data: AddToCartCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1CartAdd>>,
        TError,
        {data: AddToCartCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1CartAddMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiV1CartRemoveProductId = (
    productId: string,
 ) => {
      
      
      return axiosClientMutator<CartSummaryDto>(
      {url: `/api/v1/Cart/remove/${productId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1CartRemoveProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CartRemoveProductId>>, TError,{productId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CartRemoveProductId>>, TError,{productId: string}, TContext> => {

const mutationKey = ['deleteApiV1CartRemoveProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1CartRemoveProductId>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  deleteApiV1CartRemoveProductId(productId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CartRemoveProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1CartRemoveProductId>>>
    
    export type DeleteApiV1CartRemoveProductIdMutationError = ProblemDetails

    export const useDeleteApiV1CartRemoveProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CartRemoveProductId>>, TError,{productId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1CartRemoveProductId>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CartRemoveProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putApiV1CartUpdateQuantity = (
    updateCartItemQuantityCommand: UpdateCartItemQuantityCommand,
 ) => {
      
      
      return axiosClientMutator<CartSummaryDto>(
      {url: `/api/v1/Cart/update-quantity`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCartItemQuantityCommand
    },
      );
    }
  


export const getPutApiV1CartUpdateQuantityMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1CartUpdateQuantity>>, TError,{data: UpdateCartItemQuantityCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1CartUpdateQuantity>>, TError,{data: UpdateCartItemQuantityCommand}, TContext> => {

const mutationKey = ['putApiV1CartUpdateQuantity'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1CartUpdateQuantity>>, {data: UpdateCartItemQuantityCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiV1CartUpdateQuantity(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1CartUpdateQuantityMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1CartUpdateQuantity>>>
    export type PutApiV1CartUpdateQuantityMutationBody = UpdateCartItemQuantityCommand
    export type PutApiV1CartUpdateQuantityMutationError = ProblemDetails

    export const usePutApiV1CartUpdateQuantity = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1CartUpdateQuantity>>, TError,{data: UpdateCartItemQuantityCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1CartUpdateQuantity>>,
        TError,
        {data: UpdateCartItemQuantityCommand},
        TContext
      > => {

      const mutationOptions = getPutApiV1CartUpdateQuantityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiV1CartClear = (
    
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Cart/clear`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1CartClearMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CartClear>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CartClear>>, TError,void, TContext> => {

const mutationKey = ['deleteApiV1CartClear'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1CartClear>>, void> = () => {
          

          return  deleteApiV1CartClear()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CartClearMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1CartClear>>>
    
    export type DeleteApiV1CartClearMutationError = ProblemDetails

    export const useDeleteApiV1CartClear = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CartClear>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1CartClear>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CartClearMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    