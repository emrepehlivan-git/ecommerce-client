/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddToCartCommand,
  CartDto,
  CartSummaryDto,
  ProblemDetails,
  UpdateCartItemQuantityCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiCart = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CartDto>(
      {url: `/api/Cart`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiCartQueryKey = () => {
    return [`/api/Cart`] as const;
    }

    
export const getGetApiCartInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiCart>>>, TError = ProblemDetails>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCart>>> = ({ signal }) => getApiCart(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCartInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCart>>>
export type GetApiCartInfiniteQueryError = ProblemDetails


export function useGetApiCartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCart>>>, TError = ProblemDetails>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCart>>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCart>>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCartInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCart>>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCartInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiCartQueryOptions = <TData = Awaited<ReturnType<typeof getApiCart>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCart>>> = ({ signal }) => getApiCart(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCartQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCart>>>
export type GetApiCartQueryError = ProblemDetails


export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCart>>,
          TError,
          Awaited<ReturnType<typeof getApiCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCart<TData = Awaited<ReturnType<typeof getApiCart>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCart>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCartQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiCartAdd = (
    addToCartCommand: AddToCartCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CartSummaryDto>(
      {url: `/api/Cart/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addToCartCommand, signal
    },
      );
    }
  


export const getPostApiCartAddMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartAdd>>, TError,{data: AddToCartCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCartAdd>>, TError,{data: AddToCartCommand}, TContext> => {

const mutationKey = ['postApiCartAdd'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCartAdd>>, {data: AddToCartCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiCartAdd(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiCartAddMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCartAdd>>>
    export type PostApiCartAddMutationBody = AddToCartCommand
    export type PostApiCartAddMutationError = ProblemDetails

    export const usePostApiCartAdd = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartAdd>>, TError,{data: AddToCartCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiCartAdd>>,
        TError,
        {data: AddToCartCommand},
        TContext
      > => {

      const mutationOptions = getPostApiCartAddMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiCartRemoveProductId = (
    productId: string,
 ) => {
      
      
      return axiosClientMutator<CartSummaryDto>(
      {url: `/api/Cart/remove/${productId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiCartRemoveProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartRemoveProductId>>, TError,{productId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartRemoveProductId>>, TError,{productId: string}, TContext> => {

const mutationKey = ['deleteApiCartRemoveProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartRemoveProductId>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  deleteApiCartRemoveProductId(productId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCartRemoveProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartRemoveProductId>>>
    
    export type DeleteApiCartRemoveProductIdMutationError = ProblemDetails

    export const useDeleteApiCartRemoveProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartRemoveProductId>>, TError,{productId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCartRemoveProductId>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiCartRemoveProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putApiCartUpdateQuantity = (
    updateCartItemQuantityCommand: UpdateCartItemQuantityCommand,
 ) => {
      
      
      return axiosClientMutator<CartSummaryDto>(
      {url: `/api/Cart/update-quantity`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCartItemQuantityCommand
    },
      );
    }
  


export const getPutApiCartUpdateQuantityMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartUpdateQuantity>>, TError,{data: UpdateCartItemQuantityCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiCartUpdateQuantity>>, TError,{data: UpdateCartItemQuantityCommand}, TContext> => {

const mutationKey = ['putApiCartUpdateQuantity'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCartUpdateQuantity>>, {data: UpdateCartItemQuantityCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiCartUpdateQuantity(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiCartUpdateQuantityMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCartUpdateQuantity>>>
    export type PutApiCartUpdateQuantityMutationBody = UpdateCartItemQuantityCommand
    export type PutApiCartUpdateQuantityMutationError = ProblemDetails

    export const usePutApiCartUpdateQuantity = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartUpdateQuantity>>, TError,{data: UpdateCartItemQuantityCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiCartUpdateQuantity>>,
        TError,
        {data: UpdateCartItemQuantityCommand},
        TContext
      > => {

      const mutationOptions = getPutApiCartUpdateQuantityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiCartClear = (
    
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Cart/clear`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiCartClearMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartClear>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartClear>>, TError,void, TContext> => {

const mutationKey = ['deleteApiCartClear'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartClear>>, void> = () => {
          

          return  deleteApiCartClear()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCartClearMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartClear>>>
    
    export type DeleteApiCartClearMutationError = ProblemDetails

    export const useDeleteApiCartClear = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartClear>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCartClear>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiCartClearMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    