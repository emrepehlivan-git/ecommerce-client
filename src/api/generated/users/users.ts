/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiV1UsersParams,
  ProblemDetails,
  UserDto
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1Users = (
    params?: GetApiV1UsersParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<UserDto[]>(
      {url: `/api/v1/Users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1UsersQueryKey = (params?: GetApiV1UsersParams,) => {
    return [`/api/v1/Users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1UsersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Users>>, GetApiV1UsersParams['page']>, TError = ProblemDetails>(params?: GetApiV1UsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData, Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']> = ({ signal, pageParam }) => getApiV1Users({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData, Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1UsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Users>>>
export type GetApiV1UsersInfiniteQueryError = ProblemDetails


export function useGetApiV1UsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Users>>, GetApiV1UsersParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiV1UsersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData, Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Users>>, GetApiV1UsersParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1UsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData, Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Users>>, GetApiV1UsersParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1UsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData, Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1UsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Users>>, GetApiV1UsersParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1UsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData, Awaited<ReturnType<typeof getApiV1Users>>, QueryKey, GetApiV1UsersParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1UsersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1UsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ProblemDetails>(params?: GetApiV1UsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Users>>> = ({ signal }) => getApiV1Users(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1UsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Users>>>
export type GetApiV1UsersQueryError = ProblemDetails


export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ProblemDetails>(
 params: undefined |  GetApiV1UsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ProblemDetails>(
 params?: GetApiV1UsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ProblemDetails>(
 params?: GetApiV1UsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Users<TData = Awaited<ReturnType<typeof getApiV1Users>>, TError = ProblemDetails>(
 params?: GetApiV1UsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1UsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1UsersId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<UserDto>(
      {url: `/api/v1/Users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1UsersIdQueryKey = (id: string,) => {
    return [`/api/v1/Users/${id}`] as const;
    }

    
export const getGetApiV1UsersIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersId>>> = ({ signal }) => getApiV1UsersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1UsersIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersId>>>
export type GetApiV1UsersIdInfiniteQueryError = ProblemDetails


export function useGetApiV1UsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1UsersIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1UsersId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1UsersIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1UsersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1UsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersId>>> = ({ signal }) => getApiV1UsersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1UsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1UsersId>>>
export type GetApiV1UsersIdQueryError = ProblemDetails


export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1UsersId<TData = Awaited<ReturnType<typeof getApiV1UsersId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1UsersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1UsersActivateId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Users/activate/${id}`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiV1UsersActivateIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UsersActivateId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1UsersActivateId>>, TError,{id: string}, TContext> => {

const mutationKey = ['postApiV1UsersActivateId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1UsersActivateId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  postApiV1UsersActivateId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1UsersActivateIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1UsersActivateId>>>
    
    export type PostApiV1UsersActivateIdMutationError = ProblemDetails

    export const usePostApiV1UsersActivateId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UsersActivateId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1UsersActivateId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPostApiV1UsersActivateIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1UsersDeactivateId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Users/deactivate/${id}`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiV1UsersDeactivateIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UsersDeactivateId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1UsersDeactivateId>>, TError,{id: string}, TContext> => {

const mutationKey = ['postApiV1UsersDeactivateId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1UsersDeactivateId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  postApiV1UsersDeactivateId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1UsersDeactivateIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1UsersDeactivateId>>>
    
    export type PostApiV1UsersDeactivateIdMutationError = ProblemDetails

    export const usePostApiV1UsersDeactivateId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UsersDeactivateId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1UsersDeactivateId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPostApiV1UsersDeactivateIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putApiV1UsersIdBirthday = (
    id: string,
    putApiV1UsersIdBirthdayBody: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Users/${id}/birthday`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiV1UsersIdBirthdayBody
    },
      );
    }
  


export const getPutApiV1UsersIdBirthdayMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersIdBirthday>>, TError,{id: string;data: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersIdBirthday>>, TError,{id: string;data: string}, TContext> => {

const mutationKey = ['putApiV1UsersIdBirthday'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1UsersIdBirthday>>, {id: string;data: string}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1UsersIdBirthday(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1UsersIdBirthdayMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1UsersIdBirthday>>>
    export type PutApiV1UsersIdBirthdayMutationBody = string
    export type PutApiV1UsersIdBirthdayMutationError = ProblemDetails

    export const usePutApiV1UsersIdBirthday = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1UsersIdBirthday>>, TError,{id: string;data: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1UsersIdBirthday>>,
        TError,
        {id: string;data: string},
        TContext
      > => {

      const mutationOptions = getPutApiV1UsersIdBirthdayMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    