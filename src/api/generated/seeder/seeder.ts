/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostApiV1SeederRunParams,
  PostApiV1SeederSeedImagesParams
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const postApiV1SeederRun = (
    params?: PostApiV1SeederRunParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/seeder/run`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostApiV1SeederRunMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SeederRun>>, TError,{params?: PostApiV1SeederRunParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1SeederRun>>, TError,{params?: PostApiV1SeederRunParams}, TContext> => {

const mutationKey = ['postApiV1SeederRun'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1SeederRun>>, {params?: PostApiV1SeederRunParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiV1SeederRun(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SeederRunMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1SeederRun>>>
    
    export type PostApiV1SeederRunMutationError = unknown

    export const usePostApiV1SeederRun = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SeederRun>>, TError,{params?: PostApiV1SeederRunParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1SeederRun>>,
        TError,
        {params?: PostApiV1SeederRunParams},
        TContext
      > => {

      const mutationOptions = getPostApiV1SeederRunMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1SeederSeedImages = (
    params?: PostApiV1SeederSeedImagesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/seeder/seed-images`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostApiV1SeederSeedImagesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SeederSeedImages>>, TError,{params?: PostApiV1SeederSeedImagesParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1SeederSeedImages>>, TError,{params?: PostApiV1SeederSeedImagesParams}, TContext> => {

const mutationKey = ['postApiV1SeederSeedImages'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1SeederSeedImages>>, {params?: PostApiV1SeederSeedImagesParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiV1SeederSeedImages(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SeederSeedImagesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1SeederSeedImages>>>
    
    export type PostApiV1SeederSeedImagesMutationError = unknown

    export const usePostApiV1SeederSeedImages = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1SeederSeedImages>>, TError,{params?: PostApiV1SeederSeedImagesParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1SeederSeedImages>>,
        TError,
        {params?: PostApiV1SeederSeedImagesParams},
        TContext
      > => {

      const mutationOptions = getPostApiV1SeederSeedImagesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    