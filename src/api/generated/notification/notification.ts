/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  AnnouncementRequest,
  SendBulkNotificationCommand,
  SendSystemNotificationCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const postApiV1NotificationSystem = (
    sendSystemNotificationCommand: SendSystemNotificationCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Notification/system`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendSystemNotificationCommand, signal
    },
      );
    }
  


export const getPostApiV1NotificationSystemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSystem>>, TError,{data: SendSystemNotificationCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSystem>>, TError,{data: SendSystemNotificationCommand}, TContext> => {

const mutationKey = ['postApiV1NotificationSystem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1NotificationSystem>>, {data: SendSystemNotificationCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationSystem(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationSystemMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1NotificationSystem>>>
    export type PostApiV1NotificationSystemMutationBody = SendSystemNotificationCommand
    export type PostApiV1NotificationSystemMutationError = unknown

    export const usePostApiV1NotificationSystem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSystem>>, TError,{data: SendSystemNotificationCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1NotificationSystem>>,
        TError,
        {data: SendSystemNotificationCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1NotificationSystemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1NotificationBulk = (
    sendBulkNotificationCommand: SendBulkNotificationCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Notification/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendBulkNotificationCommand, signal
    },
      );
    }
  


export const getPostApiV1NotificationBulkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationBulk>>, TError,{data: SendBulkNotificationCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationBulk>>, TError,{data: SendBulkNotificationCommand}, TContext> => {

const mutationKey = ['postApiV1NotificationBulk'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1NotificationBulk>>, {data: SendBulkNotificationCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationBulk(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationBulkMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1NotificationBulk>>>
    export type PostApiV1NotificationBulkMutationBody = SendBulkNotificationCommand
    export type PostApiV1NotificationBulkMutationError = unknown

    export const usePostApiV1NotificationBulk = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationBulk>>, TError,{data: SendBulkNotificationCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1NotificationBulk>>,
        TError,
        {data: SendBulkNotificationCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1NotificationBulkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1NotificationAnnouncement = (
    announcementRequest: AnnouncementRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Notification/announcement`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: announcementRequest, signal
    },
      );
    }
  


export const getPostApiV1NotificationAnnouncementMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationAnnouncement>>, TError,{data: AnnouncementRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationAnnouncement>>, TError,{data: AnnouncementRequest}, TContext> => {

const mutationKey = ['postApiV1NotificationAnnouncement'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1NotificationAnnouncement>>, {data: AnnouncementRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationAnnouncement(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationAnnouncementMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1NotificationAnnouncement>>>
    export type PostApiV1NotificationAnnouncementMutationBody = AnnouncementRequest
    export type PostApiV1NotificationAnnouncementMutationError = unknown

    export const usePostApiV1NotificationAnnouncement = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationAnnouncement>>, TError,{data: AnnouncementRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1NotificationAnnouncement>>,
        TError,
        {data: AnnouncementRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1NotificationAnnouncementMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    