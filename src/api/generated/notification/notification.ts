/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  NotificationRequest,
  SendNotificationCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const postApiV1NotificationSend = (
    sendNotificationCommand: SendNotificationCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Notification/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendNotificationCommand, signal
    },
      );
    }
  


export const getPostApiV1NotificationSendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSend>>, TError,{data: SendNotificationCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSend>>, TError,{data: SendNotificationCommand}, TContext> => {

const mutationKey = ['postApiV1NotificationSend'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1NotificationSend>>, {data: SendNotificationCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationSend(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationSendMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1NotificationSend>>>
    export type PostApiV1NotificationSendMutationBody = SendNotificationCommand
    export type PostApiV1NotificationSendMutationError = unknown

    export const usePostApiV1NotificationSend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSend>>, TError,{data: SendNotificationCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1NotificationSend>>,
        TError,
        {data: SendNotificationCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1NotificationSendMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1NotificationSendToUserUserId = (
    userId: string,
    notificationRequest: NotificationRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Notification/send-to-user/${userId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: notificationRequest, signal
    },
      );
    }
  


export const getPostApiV1NotificationSendToUserUserIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSendToUserUserId>>, TError,{userId: string;data: NotificationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSendToUserUserId>>, TError,{userId: string;data: NotificationRequest}, TContext> => {

const mutationKey = ['postApiV1NotificationSendToUserUserId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1NotificationSendToUserUserId>>, {userId: string;data: NotificationRequest}> = (props) => {
          const {userId,data} = props ?? {};

          return  postApiV1NotificationSendToUserUserId(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationSendToUserUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1NotificationSendToUserUserId>>>
    export type PostApiV1NotificationSendToUserUserIdMutationBody = NotificationRequest
    export type PostApiV1NotificationSendToUserUserIdMutationError = unknown

    export const usePostApiV1NotificationSendToUserUserId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSendToUserUserId>>, TError,{userId: string;data: NotificationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1NotificationSendToUserUserId>>,
        TError,
        {userId: string;data: NotificationRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1NotificationSendToUserUserIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiV1NotificationSendToAll = (
    notificationRequest: NotificationRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Notification/send-to-all`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: notificationRequest, signal
    },
      );
    }
  


export const getPostApiV1NotificationSendToAllMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSendToAll>>, TError,{data: NotificationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSendToAll>>, TError,{data: NotificationRequest}, TContext> => {

const mutationKey = ['postApiV1NotificationSendToAll'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1NotificationSendToAll>>, {data: NotificationRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1NotificationSendToAll(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1NotificationSendToAllMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1NotificationSendToAll>>>
    export type PostApiV1NotificationSendToAllMutationBody = NotificationRequest
    export type PostApiV1NotificationSendToAllMutationError = unknown

    export const usePostApiV1NotificationSendToAll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1NotificationSendToAll>>, TError,{data: NotificationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1NotificationSendToAll>>,
        TError,
        {data: NotificationRequest},
        TContext
      > => {

      const mutationOptions = getPostApiV1NotificationSendToAllMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    