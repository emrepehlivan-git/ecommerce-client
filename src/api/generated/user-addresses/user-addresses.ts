/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddUserAddressCommand,
  DeleteUserAddressRequest,
  GetApiUserAddressesUserUserIdParams,
  SetDefaultRequest,
  UpdateUserAddressRequest
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiUserAddressesUserUserId = (
    userId: string,
    params?: GetApiUserAddressesUserUserIdParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/UserAddresses/user/${userId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiUserAddressesUserUserIdQueryKey = (userId: string,
    params?: GetApiUserAddressesUserUserIdParams,) => {
    return [`/api/UserAddresses/user/${userId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUserAddressesUserUserIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, GetApiUserAddressesUserUserIdParams['page']>, TError = unknown>(userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData, Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserAddressesUserUserIdQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']> = ({ signal, pageParam }) => getApiUserAddressesUserUserId(userId,{...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData, Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserAddressesUserUserIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>>
export type GetApiUserAddressesUserUserIdInfiniteQueryError = unknown


export function useGetApiUserAddressesUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, GetApiUserAddressesUserUserIdParams['page']>, TError = unknown>(
 userId: string,
    params: undefined |  GetApiUserAddressesUserUserIdParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData, Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserAddressesUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, GetApiUserAddressesUserUserIdParams['page']>, TError = unknown>(
 userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData, Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserAddressesUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, GetApiUserAddressesUserUserIdParams['page']>, TError = unknown>(
 userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData, Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserAddressesUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, GetApiUserAddressesUserUserIdParams['page']>, TError = unknown>(
 userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData, Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, QueryKey, GetApiUserAddressesUserUserIdParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserAddressesUserUserIdInfiniteQueryOptions(userId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiUserAddressesUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError = unknown>(userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserAddressesUserUserIdQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>> = ({ signal }) => getApiUserAddressesUserUserId(userId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUserAddressesUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>>
export type GetApiUserAddressesUserUserIdQueryError = unknown


export function useGetApiUserAddressesUserUserId<TData = Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError = unknown>(
 userId: string,
    params: undefined |  GetApiUserAddressesUserUserIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserAddressesUserUserId<TData = Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError = unknown>(
 userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUserAddressesUserUserId<TData = Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError = unknown>(
 userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUserAddressesUserUserId<TData = Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError = unknown>(
 userId: string,
    params?: GetApiUserAddressesUserUserIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUserAddressesUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUserAddressesUserUserIdQueryOptions(userId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiUserAddresses = (
    addUserAddressCommand: AddUserAddressCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/UserAddresses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addUserAddressCommand, signal
    },
      );
    }
  


export const getPostApiUserAddressesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserAddresses>>, TError,{data: AddUserAddressCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserAddresses>>, TError,{data: AddUserAddressCommand}, TContext> => {

const mutationKey = ['postApiUserAddresses'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserAddresses>>, {data: AddUserAddressCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserAddresses(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUserAddressesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserAddresses>>>
    export type PostApiUserAddressesMutationBody = AddUserAddressCommand
    export type PostApiUserAddressesMutationError = unknown

    export const usePostApiUserAddresses = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserAddresses>>, TError,{data: AddUserAddressCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUserAddresses>>,
        TError,
        {data: AddUserAddressCommand},
        TContext
      > => {

      const mutationOptions = getPostApiUserAddressesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putApiUserAddressesId = (
    id: string,
    updateUserAddressRequest: UpdateUserAddressRequest,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/UserAddresses/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserAddressRequest
    },
      );
    }
  


export const getPutApiUserAddressesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserAddressesId>>, TError,{id: string;data: UpdateUserAddressRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserAddressesId>>, TError,{id: string;data: UpdateUserAddressRequest}, TContext> => {

const mutationKey = ['putApiUserAddressesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserAddressesId>>, {id: string;data: UpdateUserAddressRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiUserAddressesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserAddressesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserAddressesId>>>
    export type PutApiUserAddressesIdMutationBody = UpdateUserAddressRequest
    export type PutApiUserAddressesIdMutationError = unknown

    export const usePutApiUserAddressesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserAddressesId>>, TError,{id: string;data: UpdateUserAddressRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUserAddressesId>>,
        TError,
        {id: string;data: UpdateUserAddressRequest},
        TContext
      > => {

      const mutationOptions = getPutApiUserAddressesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiUserAddressesId = (
    id: string,
    deleteUserAddressRequest: DeleteUserAddressRequest,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/UserAddresses/${id}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteUserAddressRequest
    },
      );
    }
  


export const getDeleteApiUserAddressesIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserAddressesId>>, TError,{id: string;data: DeleteUserAddressRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserAddressesId>>, TError,{id: string;data: DeleteUserAddressRequest}, TContext> => {

const mutationKey = ['deleteApiUserAddressesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUserAddressesId>>, {id: string;data: DeleteUserAddressRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  deleteApiUserAddressesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUserAddressesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUserAddressesId>>>
    export type DeleteApiUserAddressesIdMutationBody = DeleteUserAddressRequest
    export type DeleteApiUserAddressesIdMutationError = unknown

    export const useDeleteApiUserAddressesId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserAddressesId>>, TError,{id: string;data: DeleteUserAddressRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUserAddressesId>>,
        TError,
        {id: string;data: DeleteUserAddressRequest},
        TContext
      > => {

      const mutationOptions = getDeleteApiUserAddressesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const patchApiUserAddressesIdSetDefault = (
    id: string,
    setDefaultRequest: SetDefaultRequest,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/UserAddresses/${id}/set-default`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: setDefaultRequest
    },
      );
    }
  


export const getPatchApiUserAddressesIdSetDefaultMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUserAddressesIdSetDefault>>, TError,{id: string;data: SetDefaultRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUserAddressesIdSetDefault>>, TError,{id: string;data: SetDefaultRequest}, TContext> => {

const mutationKey = ['patchApiUserAddressesIdSetDefault'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUserAddressesIdSetDefault>>, {id: string;data: SetDefaultRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiUserAddressesIdSetDefault(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUserAddressesIdSetDefaultMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUserAddressesIdSetDefault>>>
    export type PatchApiUserAddressesIdSetDefaultMutationBody = SetDefaultRequest
    export type PatchApiUserAddressesIdSetDefaultMutationError = unknown

    export const usePatchApiUserAddressesIdSetDefault = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUserAddressesIdSetDefault>>, TError,{id: string;data: SetDefaultRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUserAddressesIdSetDefault>>,
        TError,
        {id: string;data: SetDefaultRequest},
        TContext
      > => {

      const mutationOptions = getPatchApiUserAddressesIdSetDefaultMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    