/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiOrderParams,
  OrderDto,
  OrderItemAddCommand,
  OrderPlaceCommand,
  OrderStatusUpdateCommand,
  ProblemDetails
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiOrder = (
    params?: GetApiOrderParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<OrderDto[]>(
      {url: `/api/Order`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiOrderQueryKey = (params?: GetApiOrderParams,) => {
    return [`/api/Order`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiOrderInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOrder>>, GetApiOrderParams['page']>, TError = ProblemDetails>(params?: GetApiOrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData, Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']> = ({ signal, pageParam }) => getApiOrder({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData, Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrder>>>
export type GetApiOrderInfiniteQueryError = ProblemDetails


export function useGetApiOrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrder>>, GetApiOrderParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiOrderParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData, Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrder>>,
          TError,
          Awaited<ReturnType<typeof getApiOrder>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrder>>, GetApiOrderParams['page']>, TError = ProblemDetails>(
 params?: GetApiOrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData, Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrder>>,
          TError,
          Awaited<ReturnType<typeof getApiOrder>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrder>>, GetApiOrderParams['page']>, TError = ProblemDetails>(
 params?: GetApiOrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData, Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrder>>, GetApiOrderParams['page']>, TError = ProblemDetails>(
 params?: GetApiOrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData, Awaited<ReturnType<typeof getApiOrder>>, QueryKey, GetApiOrderParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOrderQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrder>>, TError = ProblemDetails>(params?: GetApiOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrder>>> = ({ signal }) => getApiOrder(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrder>>>
export type GetApiOrderQueryError = ProblemDetails


export function useGetApiOrder<TData = Awaited<ReturnType<typeof getApiOrder>>, TError = ProblemDetails>(
 params: undefined |  GetApiOrderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrder>>,
          TError,
          Awaited<ReturnType<typeof getApiOrder>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrder<TData = Awaited<ReturnType<typeof getApiOrder>>, TError = ProblemDetails>(
 params?: GetApiOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrder>>,
          TError,
          Awaited<ReturnType<typeof getApiOrder>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrder<TData = Awaited<ReturnType<typeof getApiOrder>>, TError = ProblemDetails>(
 params?: GetApiOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrder<TData = Awaited<ReturnType<typeof getApiOrder>>, TError = ProblemDetails>(
 params?: GetApiOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiOrder = (
    orderPlaceCommand: OrderPlaceCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/Order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderPlaceCommand, signal
    },
      );
    }
  


export const getPostApiOrderMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError,{data: OrderPlaceCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError,{data: OrderPlaceCommand}, TContext> => {

const mutationKey = ['postApiOrder'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrder>>, {data: OrderPlaceCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrder(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrder>>>
    export type PostApiOrderMutationBody = OrderPlaceCommand
    export type PostApiOrderMutationError = ProblemDetails

    export const usePostApiOrder = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError,{data: OrderPlaceCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrder>>,
        TError,
        {data: OrderPlaceCommand},
        TContext
      > => {

      const mutationOptions = getPostApiOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiOrderId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<OrderDto>(
      {url: `/api/Order/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOrderIdQueryKey = (id: string,) => {
    return [`/api/Order/${id}`] as const;
    }

    
export const getGetApiOrderIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderId>>> = ({ signal }) => getApiOrderId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderId>>>
export type GetApiOrderIdInfiniteQueryError = ProblemDetails


export function useGetApiOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderId>>> = ({ signal }) => getApiOrderId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderId>>>
export type GetApiOrderIdQueryError = ProblemDetails


export function useGetApiOrderId<TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderId<TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderId<TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderId<TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiOrderUserUserId = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<OrderDto[]>(
      {url: `/api/Order/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOrderUserUserIdQueryKey = (userId: string,) => {
    return [`/api/Order/user/${userId}`] as const;
    }

    
export const getGetApiOrderUserUserIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderUserUserId>>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderUserUserId>>> = ({ signal }) => getApiOrderUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderUserUserIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderUserUserId>>>
export type GetApiOrderUserUserIdInfiniteQueryError = ProblemDetails


export function useGetApiOrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderUserUserIdInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOrderUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderUserUserId>>> = ({ signal }) => getApiOrderUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderUserUserId>>>
export type GetApiOrderUserUserIdQueryError = ProblemDetails


export function useGetApiOrderUserUserId<TData = Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderUserUserId<TData = Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderUserUserId<TData = Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderUserUserId<TData = Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiOrderOrderIdItems = (
    orderId: string,
    orderItemAddCommand: OrderItemAddCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Order/${orderId}/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderItemAddCommand, signal
    },
      );
    }
  


export const getPostApiOrderOrderIdItemsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderOrderIdItems>>, TError,{orderId: string;data: OrderItemAddCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderOrderIdItems>>, TError,{orderId: string;data: OrderItemAddCommand}, TContext> => {

const mutationKey = ['postApiOrderOrderIdItems'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderOrderIdItems>>, {orderId: string;data: OrderItemAddCommand}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postApiOrderOrderIdItems(orderId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderOrderIdItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderOrderIdItems>>>
    export type PostApiOrderOrderIdItemsMutationBody = OrderItemAddCommand
    export type PostApiOrderOrderIdItemsMutationError = ProblemDetails

    export const usePostApiOrderOrderIdItems = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderOrderIdItems>>, TError,{orderId: string;data: OrderItemAddCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrderOrderIdItems>>,
        TError,
        {orderId: string;data: OrderItemAddCommand},
        TContext
      > => {

      const mutationOptions = getPostApiOrderOrderIdItemsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiOrderOrderIdItemsProductId = (
    orderId: string,
    productId: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Order/${orderId}/items/${productId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiOrderOrderIdItemsProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiOrderOrderIdItemsProductId>>, TError,{orderId: string;productId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiOrderOrderIdItemsProductId>>, TError,{orderId: string;productId: string}, TContext> => {

const mutationKey = ['deleteApiOrderOrderIdItemsProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiOrderOrderIdItemsProductId>>, {orderId: string;productId: string}> = (props) => {
          const {orderId,productId} = props ?? {};

          return  deleteApiOrderOrderIdItemsProductId(orderId,productId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiOrderOrderIdItemsProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiOrderOrderIdItemsProductId>>>
    
    export type DeleteApiOrderOrderIdItemsProductIdMutationError = ProblemDetails

    export const useDeleteApiOrderOrderIdItemsProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiOrderOrderIdItemsProductId>>, TError,{orderId: string;productId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiOrderOrderIdItemsProductId>>,
        TError,
        {orderId: string;productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiOrderOrderIdItemsProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiOrderCancelOrderId = (
    orderId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Order/cancel/${orderId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOrderCancelOrderIdQueryKey = (orderId: string,) => {
    return [`/api/Order/cancel/${orderId}`] as const;
    }

    
export const getGetApiOrderCancelOrderIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>, TError = ProblemDetails>(orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderCancelOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>> = ({ signal }) => getApiOrderCancelOrderId(orderId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderCancelOrderIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>
export type GetApiOrderCancelOrderIdInfiniteQueryError = ProblemDetails


export function useGetApiOrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderCancelOrderIdInfiniteQueryOptions(orderId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiOrderCancelOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError = ProblemDetails>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderCancelOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>> = ({ signal }) => getApiOrderCancelOrderId(orderId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOrderCancelOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>>
export type GetApiOrderCancelOrderIdQueryError = ProblemDetails


export function useGetApiOrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiOrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOrderCancelOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiOrderStatusOrderId = (
    orderId: string,
    orderStatusUpdateCommand: OrderStatusUpdateCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Order/status/${orderId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderStatusUpdateCommand, signal
    },
      );
    }
  


export const getPostApiOrderStatusOrderIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderStatusOrderId>>, TError,{orderId: string;data: OrderStatusUpdateCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderStatusOrderId>>, TError,{orderId: string;data: OrderStatusUpdateCommand}, TContext> => {

const mutationKey = ['postApiOrderStatusOrderId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderStatusOrderId>>, {orderId: string;data: OrderStatusUpdateCommand}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postApiOrderStatusOrderId(orderId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderStatusOrderIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderStatusOrderId>>>
    export type PostApiOrderStatusOrderIdMutationBody = OrderStatusUpdateCommand
    export type PostApiOrderStatusOrderIdMutationError = ProblemDetails

    export const usePostApiOrderStatusOrderId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderStatusOrderId>>, TError,{orderId: string;data: OrderStatusUpdateCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrderStatusOrderId>>,
        TError,
        {orderId: string;data: OrderStatusUpdateCommand},
        TContext
      > => {

      const mutationOptions = getPostApiOrderStatusOrderIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    