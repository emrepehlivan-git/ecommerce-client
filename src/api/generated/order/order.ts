/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiV1OrderParams,
  OrderDto,
  OrderDtoListPagedResult,
  OrderItemAddCommand,
  OrderPlaceCommand,
  OrderStatusUpdateCommand,
  ProblemDetails
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1Order = (
    params?: GetApiV1OrderParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<OrderDtoListPagedResult>(
      {url: `/api/v1/Order`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1OrderQueryKey = (params?: GetApiV1OrderParams,) => {
    return [`/api/v1/Order`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1OrderInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Order>>, GetApiV1OrderParams['page']>, TError = ProblemDetails>(params?: GetApiV1OrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData, Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']> = ({ signal, pageParam }) => getApiV1Order({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData, Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Order>>>
export type GetApiV1OrderInfiniteQueryError = ProblemDetails


export function useGetApiV1OrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Order>>, GetApiV1OrderParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiV1OrderParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData, Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Order>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Order>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Order>>, GetApiV1OrderParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1OrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData, Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Order>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Order>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Order>>, GetApiV1OrderParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1OrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData, Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Order>>, GetApiV1OrderParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1OrderParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData, Awaited<ReturnType<typeof getApiV1Order>>, QueryKey, GetApiV1OrderParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1OrderQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Order>>, TError = ProblemDetails>(params?: GetApiV1OrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Order>>> = ({ signal }) => getApiV1Order(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Order>>>
export type GetApiV1OrderQueryError = ProblemDetails


export function useGetApiV1Order<TData = Awaited<ReturnType<typeof getApiV1Order>>, TError = ProblemDetails>(
 params: undefined |  GetApiV1OrderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Order>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Order>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Order<TData = Awaited<ReturnType<typeof getApiV1Order>>, TError = ProblemDetails>(
 params?: GetApiV1OrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Order>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Order>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Order<TData = Awaited<ReturnType<typeof getApiV1Order>>, TError = ProblemDetails>(
 params?: GetApiV1OrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Order<TData = Awaited<ReturnType<typeof getApiV1Order>>, TError = ProblemDetails>(
 params?: GetApiV1OrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Order>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1Order = (
    orderPlaceCommand: OrderPlaceCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/v1/Order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderPlaceCommand, signal
    },
      );
    }
  


export const getPostApiV1OrderMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Order>>, TError,{data: OrderPlaceCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Order>>, TError,{data: OrderPlaceCommand}, TContext> => {

const mutationKey = ['postApiV1Order'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Order>>, {data: OrderPlaceCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Order(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1OrderMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Order>>>
    export type PostApiV1OrderMutationBody = OrderPlaceCommand
    export type PostApiV1OrderMutationError = ProblemDetails

    export const usePostApiV1Order = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Order>>, TError,{data: OrderPlaceCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Order>>,
        TError,
        {data: OrderPlaceCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1OrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1OrderId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<OrderDto>(
      {url: `/api/v1/Order/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1OrderIdQueryKey = (id: string,) => {
    return [`/api/v1/Order/${id}`] as const;
    }

    
export const getGetApiV1OrderIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1OrderId>>> = ({ signal }) => getApiV1OrderId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1OrderId>>>
export type GetApiV1OrderIdInfiniteQueryError = ProblemDetails


export function useGetApiV1OrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1OrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1OrderId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1OrderId>>> = ({ signal }) => getApiV1OrderId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1OrderId>>>
export type GetApiV1OrderIdQueryError = ProblemDetails


export function useGetApiV1OrderId<TData = Awaited<ReturnType<typeof getApiV1OrderId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderId<TData = Awaited<ReturnType<typeof getApiV1OrderId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderId<TData = Awaited<ReturnType<typeof getApiV1OrderId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderId<TData = Awaited<ReturnType<typeof getApiV1OrderId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1OrderUserUserId = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<OrderDto[]>(
      {url: `/api/v1/Order/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1OrderUserUserIdQueryKey = (userId: string,) => {
    return [`/api/v1/Order/user/${userId}`] as const;
    }

    
export const getGetApiV1OrderUserUserIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>> = ({ signal }) => getApiV1OrderUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderUserUserIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>
export type GetApiV1OrderUserUserIdInfiniteQueryError = ProblemDetails


export function useGetApiV1OrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderUserUserIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderUserUserIdInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1OrderUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError = ProblemDetails>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>> = ({ signal }) => getApiV1OrderUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>>
export type GetApiV1OrderUserUserIdQueryError = ProblemDetails


export function useGetApiV1OrderUserUserId<TData = Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderUserUserId<TData = Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderUserUserId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderUserUserId<TData = Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderUserUserId<TData = Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError = ProblemDetails>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderUserUserId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1OrderOrderIdItems = (
    orderId: string,
    orderItemAddCommand: OrderItemAddCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Order/${orderId}/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderItemAddCommand, signal
    },
      );
    }
  


export const getPostApiV1OrderOrderIdItemsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1OrderOrderIdItems>>, TError,{orderId: string;data: OrderItemAddCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1OrderOrderIdItems>>, TError,{orderId: string;data: OrderItemAddCommand}, TContext> => {

const mutationKey = ['postApiV1OrderOrderIdItems'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1OrderOrderIdItems>>, {orderId: string;data: OrderItemAddCommand}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postApiV1OrderOrderIdItems(orderId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1OrderOrderIdItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1OrderOrderIdItems>>>
    export type PostApiV1OrderOrderIdItemsMutationBody = OrderItemAddCommand
    export type PostApiV1OrderOrderIdItemsMutationError = ProblemDetails

    export const usePostApiV1OrderOrderIdItems = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1OrderOrderIdItems>>, TError,{orderId: string;data: OrderItemAddCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1OrderOrderIdItems>>,
        TError,
        {orderId: string;data: OrderItemAddCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1OrderOrderIdItemsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiV1OrderOrderIdItemsProductId = (
    orderId: string,
    productId: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Order/${orderId}/items/${productId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1OrderOrderIdItemsProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1OrderOrderIdItemsProductId>>, TError,{orderId: string;productId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1OrderOrderIdItemsProductId>>, TError,{orderId: string;productId: string}, TContext> => {

const mutationKey = ['deleteApiV1OrderOrderIdItemsProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1OrderOrderIdItemsProductId>>, {orderId: string;productId: string}> = (props) => {
          const {orderId,productId} = props ?? {};

          return  deleteApiV1OrderOrderIdItemsProductId(orderId,productId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1OrderOrderIdItemsProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1OrderOrderIdItemsProductId>>>
    
    export type DeleteApiV1OrderOrderIdItemsProductIdMutationError = ProblemDetails

    export const useDeleteApiV1OrderOrderIdItemsProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1OrderOrderIdItemsProductId>>, TError,{orderId: string;productId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1OrderOrderIdItemsProductId>>,
        TError,
        {orderId: string;productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1OrderOrderIdItemsProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1OrderCancelOrderId = (
    orderId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Order/cancel/${orderId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1OrderCancelOrderIdQueryKey = (orderId: string,) => {
    return [`/api/v1/Order/cancel/${orderId}`] as const;
    }

    
export const getGetApiV1OrderCancelOrderIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>, TError = ProblemDetails>(orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderCancelOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>> = ({ signal }) => getApiV1OrderCancelOrderId(orderId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderCancelOrderIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>
export type GetApiV1OrderCancelOrderIdInfiniteQueryError = ProblemDetails


export function useGetApiV1OrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderCancelOrderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderCancelOrderIdInfiniteQueryOptions(orderId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1OrderCancelOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError = ProblemDetails>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderCancelOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>> = ({ signal }) => getApiV1OrderCancelOrderId(orderId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1OrderCancelOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>>
export type GetApiV1OrderCancelOrderIdQueryError = ProblemDetails


export function useGetApiV1OrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1OrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1OrderCancelOrderId<TData = Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError = ProblemDetails>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1OrderCancelOrderId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1OrderCancelOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1OrderStatusOrderId = (
    orderId: string,
    orderStatusUpdateCommand: OrderStatusUpdateCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Order/status/${orderId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderStatusUpdateCommand, signal
    },
      );
    }
  


export const getPostApiV1OrderStatusOrderIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1OrderStatusOrderId>>, TError,{orderId: string;data: OrderStatusUpdateCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1OrderStatusOrderId>>, TError,{orderId: string;data: OrderStatusUpdateCommand}, TContext> => {

const mutationKey = ['postApiV1OrderStatusOrderId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1OrderStatusOrderId>>, {orderId: string;data: OrderStatusUpdateCommand}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postApiV1OrderStatusOrderId(orderId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1OrderStatusOrderIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1OrderStatusOrderId>>>
    export type PostApiV1OrderStatusOrderIdMutationBody = OrderStatusUpdateCommand
    export type PostApiV1OrderStatusOrderIdMutationError = ProblemDetails

    export const usePostApiV1OrderStatusOrderId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1OrderStatusOrderId>>, TError,{orderId: string;data: OrderStatusUpdateCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1OrderStatusOrderId>>,
        TError,
        {orderId: string;data: OrderStatusUpdateCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1OrderStatusOrderIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    