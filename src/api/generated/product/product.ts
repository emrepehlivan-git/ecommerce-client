/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with Keycloak Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateProductCommand,
  GetApiV1ProductParams,
  ProblemDetails,
  ProductDto,
  ProductDtoListPagedResult,
  UpdateProductCommand,
  UpdateProductStock
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1Product = (
    params?: GetApiV1ProductParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<ProductDtoListPagedResult>(
      {url: `/api/v1/Product`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1ProductQueryKey = (params?: GetApiV1ProductParams,) => {
    return [`/api/v1/Product`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1ProductInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Product>>, GetApiV1ProductParams['page']>, TError = ProblemDetails>(params?: GetApiV1ProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData, Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProductQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']> = ({ signal, pageParam }) => getApiV1Product({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData, Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProductInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Product>>>
export type GetApiV1ProductInfiniteQueryError = ProblemDetails


export function useGetApiV1ProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Product>>, GetApiV1ProductParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiV1ProductParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData, Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Product>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Product>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Product>>, GetApiV1ProductParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1ProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData, Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Product>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Product>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Product>>, GetApiV1ProductParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1ProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData, Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1ProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Product>>, GetApiV1ProductParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1ProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData, Awaited<ReturnType<typeof getApiV1Product>>, QueryKey, GetApiV1ProductParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProductInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1ProductQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Product>>, TError = ProblemDetails>(params?: GetApiV1ProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProductQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Product>>> = ({ signal }) => getApiV1Product(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Product>>>
export type GetApiV1ProductQueryError = ProblemDetails


export function useGetApiV1Product<TData = Awaited<ReturnType<typeof getApiV1Product>>, TError = ProblemDetails>(
 params: undefined |  GetApiV1ProductParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Product>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Product>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Product<TData = Awaited<ReturnType<typeof getApiV1Product>>, TError = ProblemDetails>(
 params?: GetApiV1ProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Product>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Product>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Product<TData = Awaited<ReturnType<typeof getApiV1Product>>, TError = ProblemDetails>(
 params?: GetApiV1ProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Product<TData = Awaited<ReturnType<typeof getApiV1Product>>, TError = ProblemDetails>(
 params?: GetApiV1ProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProductQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1Product = (
    createProductCommand: CreateProductCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/v1/Product`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductCommand, signal
    },
      );
    }
  


export const getPostApiV1ProductMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Product>>, TError,{data: CreateProductCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Product>>, TError,{data: CreateProductCommand}, TContext> => {

const mutationKey = ['postApiV1Product'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Product>>, {data: CreateProductCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Product(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ProductMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Product>>>
    export type PostApiV1ProductMutationBody = CreateProductCommand
    export type PostApiV1ProductMutationError = ProblemDetails

    export const usePostApiV1Product = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Product>>, TError,{data: CreateProductCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Product>>,
        TError,
        {data: CreateProductCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1ProductMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1ProductId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<ProductDto>(
      {url: `/api/v1/Product/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ProductIdQueryKey = (id: string,) => {
    return [`/api/v1/Product/${id}`] as const;
    }

    
export const getGetApiV1ProductIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProductIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProductId>>> = ({ signal }) => getApiV1ProductId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProductIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ProductId>>>
export type GetApiV1ProductIdInfiniteQueryError = ProblemDetails


export function useGetApiV1ProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1ProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProductIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1ProductIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ProductId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProductIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProductId>>> = ({ signal }) => getApiV1ProductId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProductIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ProductId>>>
export type GetApiV1ProductIdQueryError = ProblemDetails


export function useGetApiV1ProductId<TData = Awaited<ReturnType<typeof getApiV1ProductId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductId<TData = Awaited<ReturnType<typeof getApiV1ProductId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductId<TData = Awaited<ReturnType<typeof getApiV1ProductId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1ProductId<TData = Awaited<ReturnType<typeof getApiV1ProductId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProductIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiV1ProductId = (
    id: string,
    updateProductCommand: UpdateProductCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Product/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductCommand
    },
      );
    }
  


export const getPutApiV1ProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ProductId>>, TError,{id: string;data: UpdateProductCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1ProductId>>, TError,{id: string;data: UpdateProductCommand}, TContext> => {

const mutationKey = ['putApiV1ProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1ProductId>>, {id: string;data: UpdateProductCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1ProductId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1ProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1ProductId>>>
    export type PutApiV1ProductIdMutationBody = UpdateProductCommand
    export type PutApiV1ProductIdMutationError = ProblemDetails

    export const usePutApiV1ProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ProductId>>, TError,{id: string;data: UpdateProductCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1ProductId>>,
        TError,
        {id: string;data: UpdateProductCommand},
        TContext
      > => {

      const mutationOptions = getPutApiV1ProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiV1ProductId = (
    id: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Product/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1ProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ProductId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ProductId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1ProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1ProductId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1ProductId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1ProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1ProductId>>>
    
    export type DeleteApiV1ProductIdMutationError = ProblemDetails

    export const useDeleteApiV1ProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1ProductId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1ProductId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1ProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1ProductIdStock = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<number>(
      {url: `/api/v1/Product/${id}/stock`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1ProductIdStockQueryKey = (id: string,) => {
    return [`/api/v1/Product/${id}/stock`] as const;
    }

    
export const getGetApiV1ProductIdStockInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProductIdStockQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProductIdStock>>> = ({ signal }) => getApiV1ProductIdStock(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProductIdStockInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>
export type GetApiV1ProductIdStockInfiniteQueryError = ProblemDetails


export function useGetApiV1ProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1ProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProductIdStockInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1ProductIdStockQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1ProductIdStockQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProductIdStock>>> = ({ signal }) => getApiV1ProductIdStock(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1ProductIdStockQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1ProductIdStock>>>
export type GetApiV1ProductIdStockQueryError = ProblemDetails


export function useGetApiV1ProductIdStock<TData = Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductIdStock<TData = Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1ProductIdStock<TData = Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1ProductIdStock<TData = Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1ProductIdStockQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiV1ProductIdStock = (
    id: string,
    updateProductStock: UpdateProductStock,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Product/${id}/stock`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductStock
    },
      );
    }
  


export const getPutApiV1ProductIdStockMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ProductIdStock>>, TError,{id: string;data: UpdateProductStock}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1ProductIdStock>>, TError,{id: string;data: UpdateProductStock}, TContext> => {

const mutationKey = ['putApiV1ProductIdStock'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1ProductIdStock>>, {id: string;data: UpdateProductStock}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1ProductIdStock(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1ProductIdStockMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1ProductIdStock>>>
    export type PutApiV1ProductIdStockMutationBody = UpdateProductStock
    export type PutApiV1ProductIdStockMutationError = ProblemDetails

    export const usePutApiV1ProductIdStock = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1ProductIdStock>>, TError,{id: string;data: UpdateProductStock}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1ProductIdStock>>,
        TError,
        {id: string;data: UpdateProductStock},
        TContext
      > => {

      const mutationOptions = getPutApiV1ProductIdStockMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    