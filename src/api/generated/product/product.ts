/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateProductCommand,
  GetApiProductParams,
  ProblemDetails,
  ProductDto,
  ProductDtoListPagedResult,
  UpdateProductCommand,
  UpdateProductStock
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiProduct = (
    params?: GetApiProductParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<ProductDtoListPagedResult>(
      {url: `/api/Product`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiProductQueryKey = (params?: GetApiProductParams,) => {
    return [`/api/Product`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiProductInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiProduct>>, GetApiProductParams['page']>, TError = ProblemDetails>(params?: GetApiProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData, Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']> = ({ signal, pageParam }) => getApiProduct({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData, Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduct>>>
export type GetApiProductInfiniteQueryError = ProblemDetails


export function useGetApiProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProduct>>, GetApiProductParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiProductParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData, Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProduct>>, GetApiProductParams['page']>, TError = ProblemDetails>(
 params?: GetApiProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData, Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProduct>>, GetApiProductParams['page']>, TError = ProblemDetails>(
 params?: GetApiProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData, Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProduct>>, GetApiProductParams['page']>, TError = ProblemDetails>(
 params?: GetApiProductParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData, Awaited<ReturnType<typeof getApiProduct>>, QueryKey, GetApiProductParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiProductQueryOptions = <TData = Awaited<ReturnType<typeof getApiProduct>>, TError = ProblemDetails>(params?: GetApiProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProduct>>> = ({ signal }) => getApiProduct(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduct>>>
export type GetApiProductQueryError = ProblemDetails


export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = ProblemDetails>(
 params: undefined |  GetApiProductParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = ProblemDetails>(
 params?: GetApiProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = ProblemDetails>(
 params?: GetApiProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = ProblemDetails>(
 params?: GetApiProductParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiProduct = (
    createProductCommand: CreateProductCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/Product`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductCommand, signal
    },
      );
    }
  


export const getPostApiProductMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: CreateProductCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: CreateProductCommand}, TContext> => {

const mutationKey = ['postApiProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProduct>>, {data: CreateProductCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiProduct(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProduct>>>
    export type PostApiProductMutationBody = CreateProductCommand
    export type PostApiProductMutationError = ProblemDetails

    export const usePostApiProduct = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: CreateProductCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProduct>>,
        TError,
        {data: CreateProductCommand},
        TContext
      > => {

      const mutationOptions = getPostApiProductMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiProductId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<ProductDto>(
      {url: `/api/Product/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiProductIdQueryKey = (id: string,) => {
    return [`/api/Product/${id}`] as const;
    }

    
export const getGetApiProductIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiProductId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductId>>> = ({ signal }) => getApiProductId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductId>>>
export type GetApiProductIdInfiniteQueryError = ProblemDetails


export function useGetApiProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiProductIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductId>>> = ({ signal }) => getApiProductId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductId>>>
export type GetApiProductIdQueryError = ProblemDetails


export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiProductId = (
    id: string,
    updateProductCommand: UpdateProductCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Product/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductCommand
    },
      );
    }
  


export const getPutApiProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductId>>, TError,{id: string;data: UpdateProductCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiProductId>>, TError,{id: string;data: UpdateProductCommand}, TContext> => {

const mutationKey = ['putApiProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProductId>>, {id: string;data: UpdateProductCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProductId>>>
    export type PutApiProductIdMutationBody = UpdateProductCommand
    export type PutApiProductIdMutationError = ProblemDetails

    export const usePutApiProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductId>>, TError,{id: string;data: UpdateProductCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiProductId>>,
        TError,
        {id: string;data: UpdateProductCommand},
        TContext
      > => {

      const mutationOptions = getPutApiProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiProductId = (
    id: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Product/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiProductIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiProductId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiProductId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductId>>>
    
    export type DeleteApiProductIdMutationError = ProblemDetails

    export const useDeleteApiProductId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiProductId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiProductIdStock = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<number>(
      {url: `/api/Product/${id}/stock`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiProductIdStockQueryKey = (id: string,) => {
    return [`/api/Product/${id}/stock`] as const;
    }

    
export const getGetApiProductIdStockInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiProductIdStock>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductIdStockQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductIdStock>>> = ({ signal }) => getApiProductIdStock(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductIdStockInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductIdStock>>>
export type GetApiProductIdStockInfiniteQueryError = ProblemDetails


export function useGetApiProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductIdStock>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductIdStock>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductIdStock>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductIdStockInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiProductIdStock>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductIdStockInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiProductIdStockQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductIdStock>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductIdStockQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductIdStock>>> = ({ signal }) => getApiProductIdStock(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductIdStockQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductIdStock>>>
export type GetApiProductIdStockQueryError = ProblemDetails


export function useGetApiProductIdStock<TData = Awaited<ReturnType<typeof getApiProductIdStock>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductIdStock<TData = Awaited<ReturnType<typeof getApiProductIdStock>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductIdStock>>,
          TError,
          Awaited<ReturnType<typeof getApiProductIdStock>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductIdStock<TData = Awaited<ReturnType<typeof getApiProductIdStock>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductIdStock<TData = Awaited<ReturnType<typeof getApiProductIdStock>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductIdStock>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductIdStockQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiProductIdStock = (
    id: string,
    updateProductStock: UpdateProductStock,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Product/${id}/stock`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductStock
    },
      );
    }
  


export const getPutApiProductIdStockMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductIdStock>>, TError,{id: string;data: UpdateProductStock}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiProductIdStock>>, TError,{id: string;data: UpdateProductStock}, TContext> => {

const mutationKey = ['putApiProductIdStock'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProductIdStock>>, {id: string;data: UpdateProductStock}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductIdStock(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiProductIdStockMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProductIdStock>>>
    export type PutApiProductIdStockMutationBody = UpdateProductStock
    export type PutApiProductIdStockMutationError = ProblemDetails

    export const usePutApiProductIdStock = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductIdStock>>, TError,{id: string;data: UpdateProductStock}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiProductIdStock>>,
        TError,
        {id: string;data: UpdateProductStock},
        TContext
      > => {

      const mutationOptions = getPutApiProductIdStockMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    