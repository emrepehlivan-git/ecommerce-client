/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CategoryDto,
  CreateCategoryCommand,
  GetApiCategoryParams,
  ProblemDetails,
  UpdateCategoryCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiCategory = (
    params?: GetApiCategoryParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CategoryDto[]>(
      {url: `/api/Category`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiCategoryQueryKey = (params?: GetApiCategoryParams,) => {
    return [`/api/Category`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiCategoryInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiCategory>>, GetApiCategoryParams['page']>, TError = ProblemDetails>(params?: GetApiCategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData, Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCategoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']> = ({ signal, pageParam }) => getApiCategory({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData, Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCategoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCategory>>>
export type GetApiCategoryInfiniteQueryError = ProblemDetails


export function useGetApiCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategory>>, GetApiCategoryParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiCategoryParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData, Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategory>>,
          TError,
          Awaited<ReturnType<typeof getApiCategory>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategory>>, GetApiCategoryParams['page']>, TError = ProblemDetails>(
 params?: GetApiCategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData, Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategory>>,
          TError,
          Awaited<ReturnType<typeof getApiCategory>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategory>>, GetApiCategoryParams['page']>, TError = ProblemDetails>(
 params?: GetApiCategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData, Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategory>>, GetApiCategoryParams['page']>, TError = ProblemDetails>(
 params?: GetApiCategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData, Awaited<ReturnType<typeof getApiCategory>>, QueryKey, GetApiCategoryParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCategoryInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getApiCategory>>, TError = ProblemDetails>(params?: GetApiCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCategoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCategory>>> = ({ signal }) => getApiCategory(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCategory>>>
export type GetApiCategoryQueryError = ProblemDetails


export function useGetApiCategory<TData = Awaited<ReturnType<typeof getApiCategory>>, TError = ProblemDetails>(
 params: undefined |  GetApiCategoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategory>>,
          TError,
          Awaited<ReturnType<typeof getApiCategory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategory<TData = Awaited<ReturnType<typeof getApiCategory>>, TError = ProblemDetails>(
 params?: GetApiCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategory>>,
          TError,
          Awaited<ReturnType<typeof getApiCategory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategory<TData = Awaited<ReturnType<typeof getApiCategory>>, TError = ProblemDetails>(
 params?: GetApiCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCategory<TData = Awaited<ReturnType<typeof getApiCategory>>, TError = ProblemDetails>(
 params?: GetApiCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCategoryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiCategory = (
    createCategoryCommand: CreateCategoryCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/Category`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoryCommand, signal
    },
      );
    }
  


export const getPostApiCategoryMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCategory>>, TError,{data: CreateCategoryCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCategory>>, TError,{data: CreateCategoryCommand}, TContext> => {

const mutationKey = ['postApiCategory'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCategory>>, {data: CreateCategoryCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiCategory(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCategory>>>
    export type PostApiCategoryMutationBody = CreateCategoryCommand
    export type PostApiCategoryMutationError = ProblemDetails

    export const usePostApiCategory = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCategory>>, TError,{data: CreateCategoryCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiCategory>>,
        TError,
        {data: CreateCategoryCommand},
        TContext
      > => {

      const mutationOptions = getPostApiCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiCategoryId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CategoryDto>(
      {url: `/api/Category/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiCategoryIdQueryKey = (id: string,) => {
    return [`/api/Category/${id}`] as const;
    }

    
export const getGetApiCategoryIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiCategoryId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCategoryId>>> = ({ signal }) => getApiCategoryId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCategoryIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCategoryId>>>
export type GetApiCategoryIdInfiniteQueryError = ProblemDetails


export function useGetApiCategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategoryId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiCategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategoryId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiCategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategoryId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiCategoryId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCategoryIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiCategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCategoryId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCategoryId>>> = ({ signal }) => getApiCategoryId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCategoryId>>>
export type GetApiCategoryIdQueryError = ProblemDetails


export function useGetApiCategoryId<TData = Awaited<ReturnType<typeof getApiCategoryId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiCategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategoryId<TData = Awaited<ReturnType<typeof getApiCategoryId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiCategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCategoryId<TData = Awaited<ReturnType<typeof getApiCategoryId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCategoryId<TData = Awaited<ReturnType<typeof getApiCategoryId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCategoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiCategoryId = (
    id: string,
    updateCategoryCommand: UpdateCategoryCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Category/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryCommand
    },
      );
    }
  


export const getPutApiCategoryIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCategoryId>>, TError,{id: string;data: UpdateCategoryCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiCategoryId>>, TError,{id: string;data: UpdateCategoryCommand}, TContext> => {

const mutationKey = ['putApiCategoryId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCategoryId>>, {id: string;data: UpdateCategoryCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiCategoryId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCategoryId>>>
    export type PutApiCategoryIdMutationBody = UpdateCategoryCommand
    export type PutApiCategoryIdMutationError = ProblemDetails

    export const usePutApiCategoryId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCategoryId>>, TError,{id: string;data: UpdateCategoryCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiCategoryId>>,
        TError,
        {id: string;data: UpdateCategoryCommand},
        TContext
      > => {

      const mutationOptions = getPutApiCategoryIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiCategoryId = (
    id: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Category/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiCategoryIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCategoryId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCategoryId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiCategoryId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCategoryId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiCategoryId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCategoryId>>>
    
    export type DeleteApiCategoryIdMutationError = ProblemDetails

    export const useDeleteApiCategoryId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCategoryId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCategoryId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiCategoryIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    