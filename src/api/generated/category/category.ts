/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication and Versioning
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CategoryDto,
  CreateCategoryCommand,
  GetApiV1CategoryParams,
  ProblemDetails,
  UpdateCategoryCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const getApiV1Category = (
    params?: GetApiV1CategoryParams,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CategoryDto[]>(
      {url: `/api/v1/Category`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1CategoryQueryKey = (params?: GetApiV1CategoryParams,) => {
    return [`/api/v1/Category`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1CategoryInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Category>>, GetApiV1CategoryParams['page']>, TError = ProblemDetails>(params?: GetApiV1CategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData, Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']> = ({ signal, pageParam }) => getApiV1Category({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData, Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CategoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Category>>>
export type GetApiV1CategoryInfiniteQueryError = ProblemDetails


export function useGetApiV1CategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Category>>, GetApiV1CategoryParams['page']>, TError = ProblemDetails>(
 params: undefined |  GetApiV1CategoryParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData, Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Category>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Category>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Category>>, GetApiV1CategoryParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1CategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData, Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Category>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Category>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Category>>, GetApiV1CategoryParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1CategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData, Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1Category>>, GetApiV1CategoryParams['page']>, TError = ProblemDetails>(
 params?: GetApiV1CategoryParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData, Awaited<ReturnType<typeof getApiV1Category>>, QueryKey, GetApiV1CategoryParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CategoryInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1CategoryQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Category>>, TError = ProblemDetails>(params?: GetApiV1CategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Category>>> = ({ signal }) => getApiV1Category(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Category>>>
export type GetApiV1CategoryQueryError = ProblemDetails


export function useGetApiV1Category<TData = Awaited<ReturnType<typeof getApiV1Category>>, TError = ProblemDetails>(
 params: undefined |  GetApiV1CategoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Category>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Category>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Category<TData = Awaited<ReturnType<typeof getApiV1Category>>, TError = ProblemDetails>(
 params?: GetApiV1CategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Category>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Category>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Category<TData = Awaited<ReturnType<typeof getApiV1Category>>, TError = ProblemDetails>(
 params?: GetApiV1CategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Category<TData = Awaited<ReturnType<typeof getApiV1Category>>, TError = ProblemDetails>(
 params?: GetApiV1CategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Category>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CategoryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1Category = (
    createCategoryCommand: CreateCategoryCommand,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<string>(
      {url: `/api/v1/Category`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoryCommand, signal
    },
      );
    }
  


export const getPostApiV1CategoryMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Category>>, TError,{data: CreateCategoryCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1Category>>, TError,{data: CreateCategoryCommand}, TContext> => {

const mutationKey = ['postApiV1Category'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Category>>, {data: CreateCategoryCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1Category(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CategoryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Category>>>
    export type PostApiV1CategoryMutationBody = CreateCategoryCommand
    export type PostApiV1CategoryMutationError = ProblemDetails

    export const usePostApiV1Category = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1Category>>, TError,{data: CreateCategoryCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1Category>>,
        TError,
        {data: CreateCategoryCommand},
        TContext
      > => {

      const mutationOptions = getPostApiV1CategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1CategoryId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<CategoryDto>(
      {url: `/api/v1/Category/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1CategoryIdQueryKey = (id: string,) => {
    return [`/api/v1/Category/${id}`] as const;
    }

    
export const getGetApiV1CategoryIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiV1CategoryId>>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1CategoryId>>> = ({ signal }) => getApiV1CategoryId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CategoryIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1CategoryId>>>
export type GetApiV1CategoryIdInfiniteQueryError = ProblemDetails


export function useGetApiV1CategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1CategoryId>>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1CategoryId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1CategoryId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CategoryIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiV1CategoryId>>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CategoryIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiV1CategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1CategoryId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1CategoryId>>> = ({ signal }) => getApiV1CategoryId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1CategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1CategoryId>>>
export type GetApiV1CategoryIdQueryError = ProblemDetails


export function useGetApiV1CategoryId<TData = Awaited<ReturnType<typeof getApiV1CategoryId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CategoryId<TData = Awaited<ReturnType<typeof getApiV1CategoryId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CategoryId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1CategoryId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1CategoryId<TData = Awaited<ReturnType<typeof getApiV1CategoryId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1CategoryId<TData = Awaited<ReturnType<typeof getApiV1CategoryId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1CategoryId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1CategoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiV1CategoryId = (
    id: string,
    updateCategoryCommand: UpdateCategoryCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Category/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryCommand
    },
      );
    }
  


export const getPutApiV1CategoryIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1CategoryId>>, TError,{id: string;data: UpdateCategoryCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiV1CategoryId>>, TError,{id: string;data: UpdateCategoryCommand}, TContext> => {

const mutationKey = ['putApiV1CategoryId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiV1CategoryId>>, {id: string;data: UpdateCategoryCommand}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiV1CategoryId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1CategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1CategoryId>>>
    export type PutApiV1CategoryIdMutationBody = UpdateCategoryCommand
    export type PutApiV1CategoryIdMutationError = ProblemDetails

    export const usePutApiV1CategoryId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiV1CategoryId>>, TError,{id: string;data: UpdateCategoryCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiV1CategoryId>>,
        TError,
        {id: string;data: UpdateCategoryCommand},
        TContext
      > => {

      const mutationOptions = getPutApiV1CategoryIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteApiV1CategoryId = (
    id: string,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/v1/Category/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiV1CategoryIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CategoryId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CategoryId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiV1CategoryId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1CategoryId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiV1CategoryId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1CategoryId>>>
    
    export type DeleteApiV1CategoryIdMutationError = ProblemDetails

    export const useDeleteApiV1CategoryId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1CategoryId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiV1CategoryId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CategoryIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    