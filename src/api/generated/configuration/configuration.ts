/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ECommerce API
 * ECommerce API with OpenIddict Authentication
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  UpdateEmailSettingsCommand
} from '.././model';

import { axiosClientMutator } from '../../../lib/axiosClient';




export const putApiConfigurationEmailSettings = (
    updateEmailSettingsCommand: UpdateEmailSettingsCommand,
 ) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Configuration/email-settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateEmailSettingsCommand
    },
      );
    }
  


export const getPutApiConfigurationEmailSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConfigurationEmailSettings>>, TError,{data: UpdateEmailSettingsCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiConfigurationEmailSettings>>, TError,{data: UpdateEmailSettingsCommand}, TContext> => {

const mutationKey = ['putApiConfigurationEmailSettings'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiConfigurationEmailSettings>>, {data: UpdateEmailSettingsCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiConfigurationEmailSettings(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiConfigurationEmailSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiConfigurationEmailSettings>>>
    export type PutApiConfigurationEmailSettingsMutationBody = UpdateEmailSettingsCommand
    export type PutApiConfigurationEmailSettingsMutationError = unknown

    export const usePutApiConfigurationEmailSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConfigurationEmailSettings>>, TError,{data: UpdateEmailSettingsCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiConfigurationEmailSettings>>,
        TError,
        {data: UpdateEmailSettingsCommand},
        TContext
      > => {

      const mutationOptions = getPutApiConfigurationEmailSettingsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiConfigurationEmailSettings = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClientMutator<void>(
      {url: `/api/Configuration/email-settings`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiConfigurationEmailSettingsQueryKey = () => {
    return [`/api/Configuration/email-settings`] as const;
    }

    
export const getGetApiConfigurationEmailSettingsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConfigurationEmailSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>> = ({ signal }) => getApiConfigurationEmailSettings(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiConfigurationEmailSettingsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>
export type GetApiConfigurationEmailSettingsInfiniteQueryError = unknown


export function useGetApiConfigurationEmailSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>,
          TError,
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiConfigurationEmailSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>,
          TError,
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiConfigurationEmailSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiConfigurationEmailSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiConfigurationEmailSettingsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiConfigurationEmailSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConfigurationEmailSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>> = ({ signal }) => getApiConfigurationEmailSettings(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiConfigurationEmailSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>>
export type GetApiConfigurationEmailSettingsQueryError = unknown


export function useGetApiConfigurationEmailSettings<TData = Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>,
          TError,
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiConfigurationEmailSettings<TData = Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>,
          TError,
          Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiConfigurationEmailSettings<TData = Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiConfigurationEmailSettings<TData = Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiConfigurationEmailSettings>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiConfigurationEmailSettingsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



